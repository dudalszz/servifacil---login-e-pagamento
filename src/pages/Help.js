import React, { useMemo, useState } from "react";
import "./Help.css";
import { useEnterNavigation } from "../hooks/useEnterNavigation";

const ALL_FAQ = [
  {
    q: "Como enviar uma proposta para um projeto?",
    a: "Para enviar uma proposta: 1) Acesse a pÃ¡gina do projeto desejado, 2) Clique no botÃ£o 'Enviar Proposta', 3) Preencha sua proposta com valor, prazo e descriÃ§Ã£o detalhada, 4) Anexe portfÃ³lio se necessÃ¡rio, 5) Clique em 'Enviar'. VocÃª receberÃ¡ uma confirmaÃ§Ã£o por email.",
  },
  {
    q: "Como cancelar um contrato em andamento?",
    a: "Para cancelar um contrato: 1) Acesse 'Meus Projetos', 2) Selecione o projeto ativo, 3) Clique em 'Solicitar Cancelamento', 4) Informe o motivo, 5) Aguarde aprovaÃ§Ã£o do cliente. AtenÃ§Ã£o: verifique as clÃ¡usulas de cancelamento no contrato antes de prosseguir.",
  },
  {
    q: "Como funciona o sistema de disputas de pagamento?",
    a: "Se houver problemas com pagamento: 1) VÃ¡ em 'Pagamentos' > 'Disputas', 2) Clique em 'Abrir Disputa', 3) ForneÃ§a evidÃªncias (conversas, entregas, etc.), 4) Nossa equipe analisarÃ¡ em atÃ© 7 dias Ãºteis, 5) VocÃª receberÃ¡ a decisÃ£o por email. Mantenha sempre registros das comunicaÃ§Ãµes.",
  },
  {
    q: "Como solicitar suporte financeiro ou adiantamento?",
    a: "Para solicitar suporte financeiro: 1) Acesse 'Central Financeira', 2) Clique em 'Solicitar Adiantamento', 3) Envie comprovantes de renda e projetos em andamento, 4) Abra um ticket de suporte, 5) Aguarde anÃ¡lise (atÃ© 3 dias Ãºteis). DisponÃ­vel apenas para usuÃ¡rios com histÃ³rico positivo.",
  },
  {
    q: "Como alterar meu mÃ©todo de saque preferido?",
    a: "Para alterar mÃ©todo de saque: 1) VÃ¡ em 'ConfiguraÃ§Ãµes' > 'Financeiro', 2) Selecione 'MÃ©todos de Saque', 3) Escolha entre PIX, transferÃªncia bancÃ¡ria ou carteira digital, 4) Preencha os dados necessÃ¡rios, 5) Confirme com sua senha. As alteraÃ§Ãµes sÃ£o aplicadas no prÃ³ximo saque.",
  },
  {
    q: "Como editar informaÃ§Ãµes do meu perfil?",
    a: "Para editar seu perfil: 1) Clique em 'Perfil' no menu, 2) Selecione 'Editar Perfil', 3) Atualize suas informaÃ§Ãµes pessoais, habilidades e portfÃ³lio, 4) Adicione uma foto profissional, 5) Clique em 'Salvar AlteraÃ§Ãµes'. Um perfil completo aumenta suas chances de conseguir projetos.",
  },
  {
    q: "Como redefinir minha senha de acesso?",
    a: "Para redefinir sua senha: 1) Na tela de login, clique em 'Esqueci minha senha', 2) Digite seu email cadastrado, 3) Verifique sua caixa de entrada (e spam), 4) Clique no link recebido, 5) Crie uma nova senha segura. O link expira em 24 horas.",
  },
  {
    q: "Como configurar minhas notificaÃ§Ãµes?",
    a: "Para configurar notificaÃ§Ãµes: 1) Acesse 'ConfiguraÃ§Ãµes' > 'NotificaÃ§Ãµes', 2) Escolha quais tipos de notificaÃ§Ã£o deseja receber (propostas, mensagens, pagamentos), 3) Selecione os canais (email, SMS, push), 4) Defina a frequÃªncia (imediata, diÃ¡ria, semanal), 5) Salve as configuraÃ§Ãµes.",
  },
  {
    q: "Qual Ã© a taxa cobrada pela plataforma?",
    a: "Nossa taxa de serviÃ§o Ã© de 10% sobre o valor total do projeto, descontada automaticamente quando o pagamento Ã© liberado. Esta taxa cobre: proteÃ§Ã£o contra fraudes, suporte ao cliente, sistema de disputas, e manutenÃ§Ã£o da plataforma. NÃ£o hÃ¡ taxas de cadastro ou mensalidades.",
  },
  {
    q: "Como funciona o sistema de avaliaÃ§Ãµes?",
    a: "ApÃ³s cada projeto: 1) Cliente e freelancer se avaliam mutuamente, 2) Notas de 1 a 5 estrelas, 3) ComentÃ¡rios opcionais, 4) AvaliaÃ§Ãµes aparecem no perfil, 5) MÃ©dia geral Ã© calculada automaticamente. AvaliaÃ§Ãµes honestas ajudam a manter a qualidade da plataforma.",
  },
];

const Help = () => {
  const handleKeyPress = useEnterNavigation();
  const [query, setQuery] = useState("");
  const [openIdx, setOpenIdx] = useState(-1);
  const [ticket, setTicket] = useState({
    subject: "",
    description: "",
    priority: "normal",
    file: null,
  });
  const [toast, setToast] = useState("");

  const filteredFAQ = useMemo(() => {
    const q = query.trim().toLowerCase();
    if (!q) return ALL_FAQ;
    return ALL_FAQ.filter(
      (item) =>
        item.q.toLowerCase().includes(q) || item.a.toLowerCase().includes(q)
    );
  }, [query]);

  const toggleAccordion = (idx) => {
    setOpenIdx((prev) => (prev === idx ? -1 : idx));
  };

  const handleSubmitTicket = (e) => {
    e.preventDefault();
    const ticketNumber = Math.floor(1000 + Math.random() * 9000);
    const priorityText = {
      low: "baixa prioridade",
      normal: "prioridade normal", 
      high: "alta prioridade",
      urgent: "prioridade urgente"
    };
    setToast(
      `âœ… Chamado #${ticketNumber} criado com sucesso! Prioridade: ${priorityText[ticket.priority]}. Nossa equipe responderÃ¡ em atÃ© 48h Ãºteis.`
    );
    setTicket({ subject: "", description: "", priority: "normal", file: null });
    setTimeout(() => setToast(""), 6000);
  };

  return (
    <div
      className="editar-perfil help-page"
      style={{ width: "100%", maxWidth: 900 }}
    >
      <div className="header-editar" style={{ width: "100%" }}>
        <h1>Ajuda & Suporte</h1>
        <div className="security-info">
          <i className="fas fa-life-ring"></i>
          <span>Encontre respostas rÃ¡pidas ou abra um chamado.</span>
        </div>

        {/* FAQ Section */}
        <div className="section-card help-faq">
          <h2><i className="fas fa-question-circle"></i> Perguntas Frequentes</h2>
          <div className="help-search">
            <input
              type="text"
              placeholder="Buscar perguntas..."
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              aria-label="Buscar perguntas frequentes"
            />
            <i className="fas fa-search"></i>
          </div>
          <div className="help-accordion">
            {filteredFAQ.map((item, idx) => (
              <div key={idx} className="help-accordion-item">
                <button
                  className="help-accordion-trigger"
                  aria-expanded={openIdx === idx}
                  onKeyDown={(e) => {
                    if (e.key === "Enter" || e.key === " ") {
                      e.preventDefault();
                      toggleAccordion(idx);
                    }
                  }}
                  onClick={() => toggleAccordion(idx)}
                >
                  <span>{item.q}</span>
                  <i
                    className={`fas fa-chevron-${
                      openIdx === idx ? "up" : "down"
                    }`}
                  ></i>
                </button>
                {openIdx === idx && (
                  <div className="help-accordion-panel">{item.a}</div>
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Support Ticket Section */}
        <div className="section-card help-ticket">
          <h2><i className="fas fa-headset"></i> Abrir Chamado de Suporte</h2>
          <form onSubmit={handleSubmitTicket} className="help-form">
            <div className="form-group">
              <input
                type="text"
                placeholder="Assunto do chamado"
                value={ticket.subject}
                onChange={(e) =>
                  setTicket((p) => ({ ...p, subject: e.target.value }))
                }
                onKeyPress={handleKeyPress}
                required
              />
            </div>
            <div className="form-group">
              <textarea
                placeholder="Descreva detalhadamente o problema ou dÃºvida"
                value={ticket.description}
                onChange={(e) =>
                  setTicket((p) => ({ ...p, description: e.target.value.slice(0, 500) }))
                }
                onKeyPress={handleKeyPress}
                rows={4}
                maxLength={500}
                required
              />
            </div>
            <div className="form-row">
              <label className="file-label">
                <i className="fas fa-paperclip"></i>
                Anexar arquivo
                <input
                  type="file"
                  onChange={(e) =>
                    setTicket((p) => ({
                      ...p,
                      file: e.target.files?.[0] || null,
                    }))
                  }
                />
              </label>
              <label className="select-label">
                Prioridade:
                <select
                  value={ticket.priority}
                  onChange={(e) =>
                    setTicket((p) => ({ ...p, priority: e.target.value }))
                  }
                  onKeyPress={handleKeyPress}
                >
                  <option value="low">ðŸŸ¢ Baixa</option>
                  <option value="normal">ðŸŸ¡ Normal</option>
                  <option value="high">ðŸ”´ Alta</option>
                  <option value="urgent">âš¡ Urgente</option>
                </select>
              </label>
            </div>
            <div className="form-actions">
              <div className="char-counter">
                {ticket.description.length}/500 caracteres
              </div>
              <button className="save-btn" type="submit" disabled={!ticket.subject.trim() || !ticket.description.trim()}>
                <i className="fas fa-paper-plane"></i>
                Enviar Chamado
              </button>
            </div>
          </form>
          {toast && (
            <div className="toast" role="status" aria-live="polite">
              {toast}
            </div>
          )}
        </div>

        {/* Quick Tutorials */}
        <div className="section-card help-tutorials">
          <h2>Tutoriais rÃ¡pidos</h2>
          <div className="tutorial-grid">
            <a href="#" className="tutorial-card" onClick={(e) => { e.preventDefault(); alert('Tutorial em desenvolvimento'); }}>
              <i className="fas fa-paper-plane"></i>
              <span>Como enviar proposta</span>
            </a>
            <a href="#" className="tutorial-card" onClick={(e) => { e.preventDefault(); alert('Tutorial em desenvolvimento'); }}>
              <i className="fas fa-file-invoice"></i>
              <span>Como emitir nota fiscal</span>
            </a>
            <a href="#" className="tutorial-card" onClick={(e) => { e.preventDefault(); alert('Tutorial em desenvolvimento'); }}>
              <i className="fas fa-money-bill-wave"></i>
              <span>Como solicitar saque</span>
            </a>
          </div>
        </div>

        {/* Community */}
        <div className="section-card help-community">
          <div className="community-content">
            <div className="community-icon">
              <i className="fas fa-users"></i>
            </div>
            <div className="community-text">
              <h3>Comunidade</h3>
              <p>Conecte-se com outros freelancers e tire suas dÃºvidas</p>
              <button className="community-btn" onClick={() => alert('FÃ³rum em desenvolvimento')}>
                Acessar fÃ³rum
                <i className="fas fa-arrow-right"></i>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Help;
